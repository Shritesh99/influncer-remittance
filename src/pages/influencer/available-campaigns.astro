---
import Layout from '../../layouts/Layout.astro';
import { Icon } from 'astro-icon/components'

// This will be populated from the contract in the client-side script
const initialCampaigns = [];
---

<Layout title="Available Campaigns">
  <div class="space-y-6">
    <!-- Header -->
    <div class="bg-white rounded-lg shadow p-6">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-bold text-gray-900">Available Campaigns</h1>
          <p class="text-gray-600">Find and apply to campaigns that match your profile</p>
        </div>
        <div class="flex space-x-4">
          <div class="relative">
            <input
              type="text"
              id="search"
              class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
              placeholder="Search campaigns..."
            />
            <Icon
              name="mdi:search"
              class="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400"
            />
          </div>
          <select
            id="filter"
            class="border border-gray-300 rounded-lg px-4 py-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">All Campaigns</option>
            <option value="newest">Newest First</option>
            <option value="highest-budget">Highest Budget</option>
            <option value="deadline">Deadline Soon</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Campaigns Grid -->
    <div id="campaigns-grid" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
      <!-- Loading State -->
      <div id="loading-state" class="col-span-full flex justify-center items-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    </div>

    <!-- No Results State -->
    <div
      id="no-results"
      class="hidden col-span-full text-center py-12 bg-white rounded-lg shadow"
    >
      <Icon name="mdi:search" class="mx-auto h-12 w-12 text-gray-400" />
      <h3 class="mt-4 text-lg font-medium text-gray-900">No campaigns found</h3>
      <p class="mt-2 text-gray-500">Try adjusting your search or filters</p>
    </div>

    <!-- Proposal Modal -->
    <div
      id="proposal-modal"
      class="hidden fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center"
    >
      <div class="bg-white rounded-lg max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto relative">
        <div class="p-6">
          <!-- Modal Header -->
          <div class="flex items-center justify-between mb-6">
            <div>
              <h2 class="text-xl font-semibold text-gray-900">Submit Proposal</h2>
              <p class="text-sm text-gray-500 mt-1" id="modal-campaign-title"></p>
            </div>
            <button
              id="close-modal-btn"
              class="text-gray-400 hover:text-gray-500 transition-colors"
            >
              <Icon name="mdi:close" class="h-6 w-6" />
            </button>
          </div>

          <!-- Proposal Form -->
          <form id="proposal-form" class="space-y-6">

            <div>
              <label for="timeline" class="block text-sm font-medium text-gray-700">
                Timeline (days)
              </label>
              <input
                type="text"
                id="timeline"
                name="timeline"
                class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                placeholder="e.g., 2 weeks"
                required
              />
            </div>

            <div>
              <label for="budget" class="block text-sm font-medium text-gray-700">
                Proposed Budget
              </label>
              <div class="mt-1 relative rounded-md shadow-sm">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <span class="text-gray-500 sm:text-sm">$</span>
                </div>
                <input
                  type="number"
                  name="budget"
                  id="budget"
                  class="pl-7 block w-full rounded-md border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                  placeholder="0.00"
                  required
                />
              </div>
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700">Deliverables</label>
              <div id="deliverablesContainer" class="space-y-2">
                <div class="flex gap-2">
                  <input
                    type="text"
                    name="deliverables[]"
                    required
                    class="mt-1 focus:ring-blue-500 focus:border-blue-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
                  />
                  <button type="button" class="add-deliverable mt-1 p-2 text-blue-600 hover:text-blue-700">
                    <Icon name="mdi:plus" class="h-5 w-5" />
                  </button>
                </div>
              </div>
            </div>

            <div class="flex justify-end space-x-3">
              <button
                type="button"
                id="cancel-proposal-btn"
                class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                Cancel
              </button>
              <button
                type="submit"
                class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                Submit Proposal
              </button>
            </div>
          </form>
        </div>
      </div>
  </div>
  </div>
</Layout>

<template id="campaign-card-template">
  <div class="bg-white rounded-lg shadow hover:shadow-md transition-shadow duration-200">
    <div class="p-6">
      <div class="flex items-start justify-between">
        <div>
          <h3 class="text-lg font-medium text-gray-900 campaign-title"></h3>
          <p class="mt-1 text-sm text-gray-500 organization-name"></p>
        </div>
        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 campaign-status">
          Active
        </span>
      </div>
      
      <div class="mt-4 space-y-3">
        <div class="flex items-center text-sm text-gray-500">
          <Icon name="mdi:dollar" class="h-5 w-5 mr-2 text-gray-400" />
          <span class="campaign-budget"></span>
        </div>
        <div class="flex items-center text-sm text-gray-500">
          <Icon name="mdi:clock" class="h-5 w-5 mr-2 text-gray-400" />
          <span class="campaign-deadline"></span>
        </div>
      </div>

      <div class="mt-6">
        <button
          class="submit-proposal-btn w-full inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Submit Proposal
        </button>
      </div>
    </div>
  </div>
</template>

<script>
  import { ContractService, type Campaign } from '../../services/contractService';
  
  let campaignsData: Campaign[] = [
    {
    id: 111,
	organization: "Some Org",
	title: "Some Campaign",
	budget: BigInt("21212"),
	status: "Active",
	deadline: 87
  }
  ];
  const contractService = new ContractService();

  // Helper function to format currency
  const formatCurrency = (amount: bigint) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(Number(amount) / 10000); // Assuming 4 decimal places for USDC
  };

  // Helper function to format deadline
  const formatDeadline = (timestamp: number) => {
    const deadline = new Date(timestamp * 1000);
    const now = new Date();
    const diffDays = Math.ceil((deadline.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
    return `${diffDays} days left`;
  };

  // Function to create campaign cards
  const createCampaignCard = (campaign: { id: any; title: string | null; organization: any; budget: bigint; deadline: number; }) => {
    const template = document.getElementById('campaign-card-template') as HTMLTemplateElement;
    const card = template.content.cloneNode(true) as DocumentFragment;
    
    // Fill in campaign details
    card.querySelector('.campaign-title').textContent = campaign.title;
    card.querySelector('.organization-name').textContent = `by ${campaign.organization}`;
    card.querySelector('.campaign-budget').textContent = formatCurrency(campaign.budget);
    card.querySelector('.campaign-deadline').textContent = formatDeadline(campaign.deadline);
    
    // Add click handler for proposal button
    card.querySelector('.submit-proposal-btn').addEventListener('click', () => showProposalModal(campaign));
    
    return card;
  };

  // Function to show proposal modal
  const showProposalModal = (campaign: Campaign) => {
    const modal = document.getElementById('proposal-modal');
    const titleElement = document.getElementById('modal-campaign-title');
    const budgetInput = document.getElementById('budget') as HTMLInputElement;
    
    // Update modal content
    titleElement.textContent = `for ${campaign.title}`;
    
    // Set max budget if needed
    budgetInput.max = String(Number(campaign.budget) / 10000);
    
    // Show modal
    modal.classList.remove('hidden');
    
    // Setup close handlers
    const closeModal = () => {
      modal.classList.add('hidden');
      (document.getElementById('proposal-form') as HTMLFormElement).reset();
    };
    
    // Close on background click
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });
    
    // Close on button click
    document.getElementById('close-modal-btn').addEventListener('click', closeModal);
    document.getElementById('cancel-proposal-btn').addEventListener('click', closeModal);
    
    // Handle form submission
    const form = document.getElementById('proposal-form') as HTMLFormElement;
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const campaignId = Number(formData.get('campaignId'));
      const amount = BigInt(formData.get('amount') as string);
      const timeline = BigInt(formData.get('timeline') as string);
      const deliverables = formData.getAll('deliverables[]').map(d => d.toString());
      
      try {
        const proposalId = await contractService.submitProposal(
          campaignId,
          amount,
          timeline,
          deliverables
        );
        closeModal();
        // Show success message
        alert(`Proposal submitted successfully! Proposal ID: ${proposalId}`);
      } catch (error) {
        console.error('Error submitting proposal:', error);
        alert('Error submitting proposal. Please try again.');
      }
    });
  };

  // Function to filter and sort campaigns
  const filterCampaigns = (searchTerm: string, filterValue: string) => {
    let filtered = [...campaignsData];
    
    // Apply search filter
    if (searchTerm) {
      const term = searchTerm.toLowerCase();
      filtered = filtered.filter(campaign => 
        campaign.title.toLowerCase().includes(term) ||
        campaign.organization.toLowerCase().includes(term)
      );
    }
    
    // Apply sort filter
    switch (filterValue) {
      case 'newest':
        filtered.sort((a, b) => b.id - a.id);
        break;
      case 'highest-budget':
        filtered.sort((a, b) => Number(b.budget) - Number(a.budget));
        break;
      case 'deadline':
        filtered.sort((a, b) => a.deadline - b.deadline);
        break;
    }
    
    return filtered;
  };

  // Function to update the campaigns display
  const updateCampaignsDisplay = (campaigns: any[]) => {
    const grid = document.getElementById('campaigns-grid');
    const noResults = document.getElementById('no-results');
    
    grid.innerHTML = '';
    
    if (campaigns.length === 0) {
      noResults.classList.remove('hidden');
    } else {
      noResults.classList.add('hidden');
      campaigns.forEach((campaign: any) => {
        grid.appendChild(createCampaignCard(campaign));
      });
    }
  };

  // Initialize page
  const init = async () => {
    try {
      // Fetch active campaigns from the contract
      // campaignsData = await contractService.getActiveCampaigns();
      
      // Set up search and filter handlers
      const searchInput = document.getElementById('search') as HTMLInputElement;
      const filterSelect = document.getElementById('filter') as HTMLSelectElement;
      
      const handleFilters = () => {
        const filtered = filterCampaigns(searchInput.value, filterSelect.value);
        updateCampaignsDisplay(filtered);
      };
      
      searchInput.addEventListener('input', handleFilters);
      filterSelect.addEventListener('change', handleFilters);
      
      // Initial display
      handleFilters();
      
    } catch (error) {
      console.error('Error fetching campaigns:', error);
      // Show error state
      const grid = document.getElementById('campaigns-grid');
      grid.innerHTML = `
        <div class="col-span-full text-center py-12">
          <p class="text-red-500">Error loading campaigns. Please try again later.</p>
        </div>
      `;
    } finally {
      // Hide loading state
      document.getElementById('loading-state').classList.add('hidden');
    }
  };

  // Start the page initialization
  init();
</script>